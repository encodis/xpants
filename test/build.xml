<?xml version="1.0" encoding="UTF-8"?>

<project
    name="xpants"
    xmlns:au="antlib:org.apache.ant.antunit"
    xmlns:if="ant:if"
    xmlns:unless="ant:unless">

    <description>
---
Project:     XML Practical ANT Scripts
Title:       build.xml
Date:        2018-04-09
Author:      Philip Hodder
Contact:     philip.hodder@encodis.com
Summary:     Build file for XPantS test suite
...
    </description>

    <!-- load ant-contrib -->
    <taskdef resource="net/sf/antcontrib/antlib.xml"/>

    <!-- load xpants locally rather than via installed JAR -->
    <include file="../src/xpants.xml"/>

    <!-- properties -->
    <property name="test.dir" value="../build/test"/>
    <property name="temp.dir" value="../build/temp"/>

    <property name="macro.debug" value="true"/>

    <!-- prepare tests -->
    <target name="suiteSetUp">
        <echo message="Set up XPantS testing..."/>

        <delete dir="${test.dir}"/>
        <mkdir dir="${test.dir}"/>

        <delete dir="${temp.dir}"/>
        <mkdir dir="${temp.dir}"/>

        <touch file="${test.dir}/new-file.dat"/>
    </target>


    <!-- test apply-transform -->
    <target name="test-apply-transform">

        <!-- basic test -->
        <au:assertFileDoesntExist file="${test.dir}/apply-transform/output.xml"/>

        <apply-transform
            file="apply-transform/input.xml"
            output="${test.dir}/apply-transform/output.xml"
            xslt="identity"/>

        <au:assertFileExists file="${test.dir}/apply-transform/output.xml"/>

        <au:assertFilesMatch
            expected="apply-transform/expected.xml"
            actual="${test.dir}/apply-transform/output.xml"/>

        <!-- apply transform in place -->
        <copy file="apply-transform/input.xml" tofile="${test.dir}/apply-transform/input.xml"/>

        <apply-transform
            file="${test.dir}/apply-transform/input.xml"
            xslt="identity"/>

        <au:assertFilesMatch
            expected="apply-transform/input.xml"
            actual="${test.dir}/apply-transform/input.xml"/>


        <!-- test initial template -->

    </target>

    <!-- NOTE attr-checks.xml only works within a macro so difficult to test -->

    <!-- NOTE aws.xml requires a suitable AWS account etc, how to non-destructively test and verify? -->

    <target name="test-compare-files">

        <!-- compare a file with itself -->

        <!-- compare to files with know diffs and check expected -->

        <!-- compare dir with itself -->

        <!-- compare dir with another / shallow -->

        <!-- compare dir with another / deep -->

    </target>

    <target name="test-compile-schematron">

        <!-- compile test schematron and compare with expected -->

    </target>

    <target name="test-convert-schema">

        <!-- need simple schema to convert, but not all possibilities -->

    </target>

    <target name="test-deploy-files">

        <!-- deploy file to build/test and assert non-exist before/existance after -->

        <!-- deploy file set to build/test and compare? -->

    </target>

    <target name="test-extract-markdown">

        <!-- extract markdown from build.xml, assert file exists -->

        <!-- difficult to compare as we'll change the description often.
             use little changed file instead? use the test/build.xml - that can be fairly static -->

    </target>

    <target name="test-file-checks">

        <check-file-exists macro="test-file-checks" file="${test.dir}/new-file.dat" property="file.exists"/>

        <au:assertTrue>
            <istrue value="${file.exists}"/>
        </au:assertTrue>

        <check-dir-exists macro="test-file-checks" dir="${test.dir}" property="dir.exists"/>

        <au:assertTrue>
            <istrue value="${dir.exists}"/>
        </au:assertTrue>

        <!-- <check-fileset-empty macro="test-file-checks" refid=""/> -->

        <check-fileset-empty macro="test-file-checks" property="fileset.not.empty">
            <fileset dir=".">
                <include name="**/*"/>
            </fileset>
        </check-fileset-empty>

        <au:assertTrue>
            <istrue value="${fileset.not.empty}"/>
        </au:assertTrue>

    </target>


    <target name="test-git">

        <!-- get branch name and compare -->

        <!-- check it's a repo (may need to add the "property or fail" thing)-->

        <!--  -->

    </target>


    <target name="test-pandoc">

        <!-- convert a simple test MD to HTML and compare -->

    </target>

    <target name="test-python">

        <!-- run python -version -->

    </target>

    <!-- NOTE ssh.xml requires a suitable SSH server to connect to etc -->

    <target name="test-validate-with-schema">

        <!-- need a schema and an instance -->

    </target>

    <target name="test-version">


        <!-- get version from test/build.properties -->
        <!-- increment and test -->
        <!-- set and test -->
        <!-- set build number -->
        <!-- set release stage -->
        <!-- reset build.properties in tearDown -->

    </target>

    <target name="test-xspec">

        <!-- set up a test.xspec, maybe example from the XSpec repo  -->

    </target>


    <!-- clean up -->
    <target name="suiteTearDown">
        <echo message="Tear down XPantS testing..."/>

        <delete dir="${test.dir}"/>
    </target>

</project>
