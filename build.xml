<?xml version="1.0" encoding="UTF-8"?>

<project
    name="xpants"
    xmlns:if="ant:if"
    xmlns:unless="ant:unless">

    <description>
---
project:     XPants
title:       build.xml
date:        2018-02-14
author:      Philip Hodder
contact:     philip.hodder@encodis.com
summary:     Build file for XPants
...
    </description>

    <!-- include macros/properties -->
    <property environment="env"/>

    <property file="build.properties"/>

    <property name="src.dir" value="src"/>
    <property name="xslt.dir" value="${src.dir}/xslt"/>
    <property name="docs.dir" value="docs"/>
    <property name="build.dir" value="build"/>
    <property name="dist.dir" value="dist"/>
    <property name="class.path" value="com/encodis/${ant.project.name}"/>
    <property name="jar.file" value="${ant.project.name}-${version.number}.jar"/>

    <!-- include all macros (locally) -->
    <include file="${src.dir}/xpants.xml"/>

    <!-- targets -->

    <target
        name="clean"
        description="Clean build folder">

        <delete dir="${build.dir}"/>
        <mkdir dir="${build.dir}"/>
    </target>


    <target
        name="docs"
        description="Extract Markdown documentation from macro/XSLT files">

        <!-- NOTE Markdown created in docs folder so that GitHub will display it -->
        <!-- IDEA concat all MD files into single one (strip YAML?), so docs are a single page, could use for man page -->

        <!-- FIXME doing this still produces HTML tables - will these be displayed in GitHub ok? -->

        <!-- extract Markdown from ANT files -->
        <extract-markdown
            type="ant"
            remove-yaml="true"
            output="${docs.dir}">

            <fileset dir="${src.dir}" includes="*.xml"/>
        </extract-markdown>

        <!-- extract Markdown from XSLT files -->
        <extract-markdown
            type="xsl"
            remove-yaml="true"
            output="${docs.dir}">

            <fileset dir="${xslt.dir}" includes="*.xsl"/>
        </extract-markdown>

    </target>


    <target
        name="build-distribution"
        description="Assemble files and build a distribution JAR file">

        <!-- make build dirs -->
        <tempfile property="temp.dist" destdir="${build.dir}" prefix="dist" deleteonexit="true"/>
        <mkdir dir="${temp.dist}"/>

        <mkdir dir="${build.dir}/${class.path}"/>

        <!-- extract macrodefs into temp dir -->
        <apply-stylesheet
            output="${temp.dist}"
            stylesheet="extract-macrodef-from-ant">

            <fileset dir="${src.dir}">
                <include name="*.xml"/>
                <exclude name="xpants.xml"/>
            </fileset>
        </apply-stylesheet>

        <!-- concatenate macrodefs into single antlib file in dist dir -->
        <!-- IDEA put each macro file in an antlib, so this would go in the XSLT, then xpants.xml
             would use taskdef to include each one separately (and could be auto generated)-->
        <!-- IDEA have a dummy antlib.xml file with xi:include for each? but that would just
             include entire files not just macrodefs... -->
        <concat
            destfile="${build.dir}/${class.path}/xpants.xml">
            <header>&lt;antlib&gt;</header>
            <footer>&lt;/antlib&gt;</footer>
            <fileset dir="${temp.dist}" includes="*.xml"/>
        </concat>

        <!-- copy XSLTs to dist dir -->
        <mkdir dir="${build.dir}/${class.path}/xslt"/>

        <copy
            todir="${build.dir}/${class.path}/xslt">

            <fileset dir="${xslt.dir}" includes="**/*.xsl"/>
        </copy>

        <!-- create dist JAR file -->
        <mkdir dir="${build.dir}/${dist.dir}"/>

        <jar
            destfile="${build.dir}/${dist.dir}/${jar.file}">

            <fileset dir="${build.dir}">
                <include name="${class.path}/**/*"/>
            </fileset>
        </jar>

        <delete dir="${temp.dist}"/>
    </target>


    <target
        name="update-distribution"
        description="Update the distribution archive with latest build">

        <mkdir dir="${dist.dir}"/>

        <!-- if JAR file exists, do not overwrite (i.e. update version number) -->
        <fail message="[update-distribution] file '${jar.file}' exists, update version number">
            <condition>
                <available file="${dist.dir}/${jar.file}" type="file"/>
            </condition>
        </fail>

        <copy todir="${dist.dir}" file="${build.dir}/${dist.dir}/${jar.file}"/>
    </target>


    <target
        name="local-install"
        description="Deploy local build to user's ANT library">

        <deploy-file
            file="${build.dir}/${dist.dir}/${jar.file}"
            target="${user.home}/.ant/lib"
            overwrite="true"/>

    </target>

</project>
