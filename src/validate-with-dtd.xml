<?xml version="1.0" encoding="UTF-8"?>

<project name="validate-with-dtd"
    xmlns:if="ant:if"
    xmlns:unless="ant:unless">

	<description>
---
project:      XML Practical ANT Scripts
title:        validate-with-dtd.xml
date:         2018-02-19
author:       Philip Hodder
contact:      philip.hodder@encodis.com
summary:      Macro definitions to validate using DTD files
...

# validate-with-dtd.xml

A set of macro definitions to validate an XML file using a DTD. Essentially this
is a wrapper around ANT's built in `&lt;xmlvalidate&gt;` task, but with enhanced reporting
and output file manipulation. The top level macro ("validate-with-dtd") will validate either a
single file or a folder, depending on the arguments supplied:

* If the _file_ attribute is not blank and refers to a file that exists then it will be
validated, using the _output_ attribute as the resulting file name for the report.
* If the _file_ attribute is not supplied then the macro will convert all files in a folder
determined by the 'input.files' element.

&gt; NOTE: It is the responsibility of the calling task to ensure that any output folders are
created before running this task.

## Usage

```
&lt;validate-with-dtd
&#9;file="file.xml"
&#9;output="docs/validation/file.svrl"
&#9;format="svrl"/&gt;
```

```
&lt;validate-with-dtd
&#9;output="docs/validation/"
&#9;format="html"&gt;
&#9;&lt;fileset dir="models/instances"&gt;
&#9;&#9;&lt;include name="*test*.xml"/&gt;
&#9;&lt;fileset/&gt;
&lt;validate-with-dtd/&gt;
```

## Dependencies

### Stylesheets

This module uses the following stylesheets:

* __convert-log-to-svrl.xsl__ Converts the ANT log to SVRL.
* __convert-svrl-to-html.xsl__ Converts SVRL format into HTML.

&gt; NOTE: The 'svrl' output option is not currently functional as the __convert-ant-to-svrl.xsl__
file has not been written.

## Properties

The following properties can be set on the command line to override the default behaviour:

* _convert-log-to-svrl.stylesheet_ The stylesheet to be used to convert ANT log files to SVRL
* _convert-svrl-to-html.stylesheet_ The stylesheet to be used to convert SVRL to HTML

## Change Log

##### 2018-02-19 (PH) Initial version

    </description>

    <!-- load ant-contrib -->
    <taskdef resource="net/sf/antcontrib/antlib.xml"/>

    <!-- include macros/properties -->
    <dirname property="xpants.dir" file="${ant.file.validate-with-dtd}"/>

    <include file="${xpants.dir}/apply-transform.xml"/>
    <include file="${xpants.dir}/attr-checks.xml"/>
    <include file="${xpants.dir}/file-utils.xml"/>

    <!-- macros -->

	<macrodef
        name="validate-with-dtd"
        description="Validate a file according to a DTD">

		<attribute
            name="file"
            default=""
            description="Source XML file"/>

        <attribute
            name="format"
            default="svrl"
            description="Format of the final report [txt,svrl,html]"/>

        <attribute
            name="output"
            description="Path for report file(s)"/>

        <element
            name="input.files"
            optional="true"
            implicit="true"
            description="A fileset specification"/>

		<sequential>

            <!-- fail if required attributes not set -->
            <check-attr-list macro="validate-with-dtd" name="format" value="@{format}" list="txt,svrl,html"/>
            <check-attr-set macro="validate-with-dtd" name="output" value="@{output}"/>

            <!-- file or dir mode? -->
            <validate-with-dtd-file
                file="@{file}"
                output="@{output}"
                format="@{format}"
                unless:blank="@{file}"/>

            <validate-with-dtd-dir
                output="@{output}"
                format="@{format}"
                if:blank="@{file}">
                <input.files/>
            </validate-with-dtd-dir>

		</sequential>
	</macrodef>

    <macrodef
        name="validate-with-dtd-file"
        description="Validate an individual XML file against its DTD">

        <attribute
            name="file"
            description="Source XML file"/>

        <attribute
            name="output"
            description="Result file"/>

		<attribute
            name="format"
            default="svrl"
            description="Format of the final report [txt,svrl,html]"/>

        <sequential>

            <!-- fail if required attributes not set -->
            <check-attr-set macro="validate-with-dtd-file" name="file" value="@{file}"/>

            <!-- fail if file does not exist -->
            <check-file-exists macro="validate-with-dtd-file" file="@{file}"/>

            <!-- work out which macros to run -->
            <local name="output.@{format}"/>
            <property name="output.@{format}" value="true"/>

            <!-- make output folder, if required -->
            <local name="output.dir"/>
            <dirname property="output.dir" file="@{output}"/>

            <mkdir dir="${output.dir}"/>

            <validate-dtd-to-txt
                file="@{file}"
                output="@{output}"
                if:set="output.txt"/>

            <validate-dtd-to-svrl
                file="@{file}"
                output="@{output}"
                if:set="output.svrl"/>

            <validate-dtd-to-html
                file="@{file}"
                output="@{output}"
                if:set="output.html"/>

            <!-- TODO echo the result back  -->

        </sequential>
    </macrodef>

    <macrodef
        name="validate-with-dtd-dir"
        description="Validate a folder of XML files against their DTDs">

        <attribute
            name="output"
            description="Folder for report files"/>

		<attribute
            name="format"
            default="svrl"
            description="Format of the final report [txt,svrl,html]"/>

        <element
            name="input.files"
            optional="false"
            implicit="true"
            description="A fileset specification"/>

        <sequential>

            <!-- fail if input fileset is empty -->
            <check-fileset-empty macro="validate-with-dtd-dir">
                <input.files/>
            </check-fileset-empty>

            <mkdir dir="@{output}"/>

            <property name="for.keepgoing" value="true"/>

            <for param="file" keepgoing="${for.keepgoing}">
                <input.files/>

                <sequential>

                    <local name="output.name"/>
                    <basename property="output.name" file="@{file}" suffix=".xml"/>

                    <validate-with-dtd-file
                        file="@{file}"
                        output="@{output}/${output.name}.@{format}"
                        format="@{format}"/>

                </sequential>
            </for>

        </sequential>
    </macrodef>


	<macrodef
        name="validate-with-dtd-to-txt"
        description="Validate an XML file and output the validation report as text">

		<attribute
            name="file"
            description="Source XML file"/>

		<attribute
            name="output"
            description="Output report file"/>

		<sequential>

            <!-- TODO output file should be optional, if not given then use temp file?
                 but then format is irrelevant, may also want property to store true/false result -->

            <!-- set xpants.catalog if required, can override on command line -->
            <property environment="env"/>
            <property name="xpants.catalog" value="${env.XPANTS_CATALOG}" if:set="env.XPANTS_CATALOG"/>

			<record name="@{output}" action="start"/>

            <!-- TODO look at the various options for xmlvalidate - this might need catalogs to be implemented properly -->

            <!-- TODO a well-formed option? or warning if not? -->

            <!-- see docs on xmlvalidate - using schemavalidate might be better -->

            <!-- validation against ISO/W3C standard schema? -->

            <!-- need a more generic mechanism for catalog specification  -->

			<xmlvalidate
                file="@{file}"
                failonerror="false">

                <!-- <classpath>
                    <pathelement location="${user.home}/.ant/lib/resolver.jar"/>
                </classpath> -->

                <xmlcatalog>
                    <catalogpath>
                        <pathelement location="${xpants.catalog}" if:set="xpants.catalog"/>
                    </catalogpath>
                </xmlcatalog>

			</xmlvalidate>

			<record name="@{output}" action="stop"/>

            <!-- report if validation was successful -->

            <local name="output.valid"/>

            <check-file-contains property="output.valid" file="@{output}" string="is not a valid XML document"/>

            <echo message="[validate-with-dtd-to-txt] output.valid=${output.valid}" if:true="${xpants.debug}"/>

            <echo message="[validate-with-dtd] '@{file}' is NOT DTD valid" if:true="${output.valid}"/>
            <echo message="[validate-with-dtd] '@{file}' is DTD valid" unless:true="${output.valid}"/>
		</sequential>
	</macrodef>


	<macrodef
        name="validate-with-dtd-to-svrl"
        description="Validate an XML file and output the validation report as SVRL">

        <attribute
            name="file"
            description="Source XML file"/>

		<attribute
            name="output"
            description="Output report file"/>

		<sequential>

            <property name="temp.dir" value="${java.io.tmpdir}"/>
            <property name="temp.delete" value="true"/>
            <local name="temp.txt"/>
            <tempfile property="temp.txt" prefix="validate-with-dtd" suffix=".txt" destdir="${temp.dir}" deleteonexit="${temp.delete}"/>

			<validate-with-dtd-to-txt
				file="@{file}"
				output="${temp.txt}"/>

            <!--
            FIXME stylesheet does not exist in TFS. as output from xmlvalidate is plain text
            not sure how this could have ever existed, so may need to revisit this...
            Name ("ant-to-svrl") is also misleading...
            -->

            <property
                name="convert-log-to-svrl.stylesheet"
                value="convert-log-to-svrl"/>

            <echo message="[validate-with-dtd-to-svrl] convert-log-to-svrl.stylesheet=${convert-log-to-svrl.stylesheet}" if:true="${xpants.debug}"/>

            <apply-transform
                file="${temp.txt}"
                output="@{output}"
                xslt="${convert-log-to-svrl.stylesheet}"/>

		</sequential>
	</macrodef>


    <macrodef
        name="validate-with-dtd-to-html"
        description="Validate an XML file and output the validation report as HTML">

        <attribute
            name="file"
            description="Source XML file"/>

		<attribute
            name="output"
            description="Output report file"/>

		<sequential>

            <property name="temp.dir" value="${java.io.tmpdir}"/>
            <property name="temp.delete" value="true"/>
            <local name="temp.svrl"/>
            <tempfile property="temp.svrl" prefix="validate-with-dtd" suffix=".svrl" destdir="${temp.dir}" deleteonexist="${temp.delete}"/>

            <!-- TODO might need to be filtered first - c.f. validate-schematron -->

			<validate-with-dtd-to-svrl
				file="@{file}"
				output="${temp.svrl}"/>

            <property
                name="convert-svrl-to-html.stylesheet"
                value="convert-svrl-to-html"/>

            <echo message="[validate-with-dtd-to-html] convert-svrl-to-html.stylesheet=${convert-svrl-to-html.stylesheet}" if:true="${xpants.debug}"/>

            <apply-transform
                file="${temp.svrl}"
                output="@{output}"
                xslt="${convert-svrl-to-html.stylesheet}"/>

		</sequential>
	</macrodef>

</project>
