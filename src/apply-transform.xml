<?xml version="1.0" encoding="UTF-8"?>

<project name="apply-transform"
    xmlns:if="ant:if"
    xmlns:unless="ant:unless">

    <description>
---
project:    XML Practical ANT Scripts
title:      apply-transform.xml
date:       2018-05-02
author:     Philip Hodder
contact:    philip.hodder@encodis.com
summary:    Macro definitions to apply an XSLT stylesheet to an XML file
...

# apply-transform.xml

Macro definitions to apply an XSLT stylesheets or transforms to an XML file (of folder of XML
files). By default the stylesheet is applied in place, i.e. the name of the file is not changed. The
top level macro ("apply-transform") will transform either a single file or a folder, depending on
the arguments supplied:

* If the *file* attribute is not blank and refers to a file that exists then it will be
transformed.
* If the *file* attribute is not supplied then the macro will transform all files in a folder
determined by the *input.files* element.

Furthermore:

*  When processing an individual input file it will be overwritten in place, unless the
*output* attribute is set in which case that will be used as the resulting file name.
*  If the *output* attribute refers to a directory then the output of the transform will
be copied there. Also, if the *ext* attribute is set then it will replace the file's
original extension. *ext* should therefore contain a leading "." if that is required.

&gt; NOTE: It is the responsibility of the calling task to ensure that any output folders are
created and specified before running this task. Otherwise each transformed file will overwrite
the given output path.

The macro *apply-transform-file* can take an optional *params.xslt* element which contains
additional parameters to pass to ANT's &lt;xslt&gt; task. This cannot be passed to this macro via
the main *apply-transform* macro, so *apply-transform-file* must be used directly if this is
the case.

The *xslt* attribute can be used in one of two ways:

* Primarily it can be used to specify a relative or absolute path to a stylesheet
(e.g. `xslt="./my-stylesheets/convert.xsl"`).

* However, it can also be used to specify default stylesheets in the XPantS XSLT Library.
If the attribute value contains no path related information (e.g. `xslt="filter-svrl"`)
then the macro will try to locate a stylesheet with that name and the extension ".xsl" in the
**com/encodis/xpants/xslt** resource (i.e. in the XPantS jar file). So specifying
`xslt="filter-svrl"` will make the macro try and load the resource
**com/encodis/xpants/xslt/filter-svrl.xsl**.

## Usage

To apply the XPantS XSLT standard library stylesheet **remove-docs.xsl** to the **my-schema.xsd**
file, putting the result into the file **my-schema-nodocs.xsd**:

```
&lt;apply-transform
&#9;file="my-schema.xsd"
&#9;output="my-schema-nodocs.xsd"
&#9;xslt="remove-docs"/&gt;
```

To apply the **remove-docs.xsl** stylesheet to the **my-schema.xsd** file in place (so that
**my-schema.xsd** is overwritten/updated):

```
&lt;apply-transform
&#9;file="my-schema.xsd"
&#9;xslt="remove-docs"/&gt;
```

To apply the **remove-docs.xsl** stylesheet to all files in the **schema** folder, putting the
transformed files in the **updated** folder with an extension of ".upd":

```
&lt;apply-transform
&#9;output="updated"
&#9;ext=".upd"
&#9;xslt="remove-docs"&gt;
&#9;&lt;fileset dir="schema"&gt;
&#9;&#9;&lt;include name="*.xml"/&gt;
&#9;&lt;/fileset&gt;
&lt;/apply-transform&gt;
```

Apply a list of transforms in the XSLT library to a file, overwriting the file:

```
&lt;apply-transform-list-file
&#9;file="instance-doc.xml"
&#9;xslt-list="remove-docs,remove-comments,remove-processing-instructions"/&lt;
```

Process a Schematron file to include all "&lt;xi:xinclude&gt;" elements in the output file. Note
that as the XSLT engine is "xinclude aware" the file just needs to be run through the "identity"
transform:

```
&lt;apply-transform
&#9;file="doc-with-xincludes.xml"
&#9;output="expanded-doc.xml"
&#9;xslt="identity"/&lt;
```

## Dependencies

None.

## Properties

None.

## Change Log

##### 2018-02-14 (PH) Initial version

##### 2018-04-09 (PH) Macro naming alignment

    </description>

    <!-- load ant-contrib -->
    <taskdef resource="net/sf/antcontrib/antlib.xml"/>

    <!-- include macros/properties -->
    <dirname property="xpants.dir" file="${ant.file.apply-transform}"/>

    <property name="xpants.xslt.dir" value="${xpants.dir}/xslt"/>

    <include file="${xpants.dir}/check-value.xml"/>
    <include file="${xpants.dir}/file-utils.xml"/>


    <!-- macros -->

    <macrodef
        name="apply-transform"
        description="Apply a stylsheet to the designated file(s)">

        <attribute
            name="file"
            default=""
            description="Source XML file"/>

        <attribute
            name="xslt"
            description="XSLT file to be applied"/>

        <attribute
            name="ext"
            default=""
            description="Extension of output file(s)"/>

        <attribute
            name="output"
            default=""
            description="Path for output file(s)"/>

        <element
            name="input.files"
            optional="true"
            implicit="true"
            description="A fileset specification"/>

        <sequential>

            <!-- fail if required attributes not set -->
            <check-value-set prefix="[apply-transform]" name="xslt" value="@{xslt}"/>

            <!-- NOTE do not check for @{output} being blank, as this indicates @{file} should be overwritten -->

            <!-- file or fileset mode? -->
            <apply-transform-file
                file="@{file}"
                xslt="@{xslt}"
                ext="@{ext}"
                output="@{output}"
                unless:blank="@{file}"/>

            <apply-transform-fileset
                xslt="@{xslt}"
                ext="@{ext}"
                output="@{output}"
                if:blank="@{file}">
                <input.files/>
            </apply-transform-fileset>

        </sequential>
    </macrodef>


    <macrodef
        name="apply-transform-file"
        description="Apply a stylsheet to a file">

        <attribute
            name="file"
            description="Source XML file"/>

        <attribute
            name="xslt"
            description="XSLT file to be applied"/>

        <attribute
            name="ext"
            default=""
            description="Extension of output file(s)"/>

        <attribute
            name="output"
            default=""
            description="Path for output file"/>

        <element
            name="params.xslt"
            optional="true"
            implicit="true"
            description="A set of parameters for XSLT"/>

        <sequential>

            <!-- fail if file does not exist -->
            <check-file-exists macro="apply-transform-file" file="@{file}" unless:blank="@{file}"/>

            <!-- set debugging properties -->
            <property name="temp.dir" value="${java.io.tmpdir}"/>
            <property name="temp.delete" value="true"/>
            <property name="xslt.suppresswarnings" value="true"/>
            <property name="xslt.failonerror" value="true"/>

            <!-- set xpants.catalog if required, can override on command line -->
            <property environment="env"/>
            <property name="xpants.catalog" value="${env.XPANTS_CATALOG}" if:set="env.XPANTS_CATALOG"/>

            <!-- set resource path based on how macro was loaded -->
            <condition property="xslt.resource.path" value="${xpants.xslt.dir}" else="com/encodis/xpants/xslt">
                <isset property="xpants.dir"/>
            </condition>

            <!-- TODO can we use catalog to find these (as well as schema?) -->

            <!-- IDEA catalog could be how users specify their own XSLT library, but how to
                 integrate -->

            <!-- does stylesheet exist as a file as given? -->
            <local name="given.xslt.exists"/>
            <available file="@{xslt}" type="file" property="given.xslt.exists"/>

            <!-- does stylesheet exist as a file in the XPantS library (when using includes) -->
            <!-- NOTE does not seem to work with spaces in file path -->
            <local name="standard.xslt.file.exists"/>
            <available file="${xslt.resource.path}/@{xslt}.xsl" property="standard.xslt.file.exists" if:set="xpants.dir"/>

            <!-- does stylesheet exist as a file in the XPantS library (when using JAR file) -->
            <local name="standard.xslt.resource.exists"/>
            <available resource="${xslt.resource.path}/@{xslt}.xsl" property="standard.xslt.resource.exists" unless:set="xpants.dir"/>

            <!-- fail if stylesheet does not exist, either as given or in standard library -->
            <fail message="[apply-transform-file] stylesheet '@{xslt}' does not exist and/or is not in the XPantS library">
                <condition>
                    <and>
                        <not><isset property="given.xslt.exists"/></not>
                        <not><isset property="standard.xslt.file.exists"/></not>
                        <not><isset property="standard.xslt.resource.exists"/></not>
                    </and>
                </condition>
            </fail>

            <!-- detect XSLT processor (use Saxon if possible) -->
            <local name="saxon.processor"/>
            <check-class-path macro="apply-transform-file" class="net.sf.saxon.TransformerFactoryImpl" property="saxon.processor"/>

            <local name="temp.file"/>
            <tempfile property="temp.file" prefix="apply-transform" destdir="${temp.dir}" deleteonexit="${temp.delete}"/>

            <echo message="[apply-transform-file] temp.file=${temp.file}" if:true="${xpants.debug}"/>

            <!-- apply transform -->
            <xslt
                in="@{file}"
            	out="${temp.file}"
            	force="true"
                suppresswarnings="${xslt.suppresswarnings}"
                failonerror="${xslt.failonerror}">

                <style>
                    <javaresource name="${xslt.resource.path}/@{xslt}.xsl" if:set="standard.xslt.resource.exists"/>
                    <file file="${xslt.resource.path}/@{xslt}.xsl" if:set="standard.xslt.file.exists"/>
                    <file file="@{xslt}" if:set="given.xslt.exists"/>
                </style>

                <!-- use Saxon if possible -->
                <factory name="net.sf.saxon.TransformerFactoryImpl" if:true="${saxon.processor}">
                    <attribute name="http://saxon.sf.net/feature/ignoreSAXSourceParser" value="true"/>
                    <!-- NOTE sourceParserClass always ignored by ANT's xslt task -->
                    <attribute name="http://saxon.sf.net/feature/sourceParserClass" value="org.xmlresolver.tools.ResolvingXMLReader"/>
                    <attribute name="http://saxon.sf.net/feature/entityResolverClass" value="org.xmlresolver.Resolver"/>
                    <attribute name="http://saxon.sf.net/feature/uriResolverClass" value="org.xmlresolver.Resolver"/>
                    <!-- <attribute name="http://saxon.sf.net/feature/validation" value="false"/> -->

                    <!-- TODO check that turning xinclude-aware on is OK for regular transforms -->
                    <attribute name="http://saxon.sf.net/feature/xinclude-aware" value="true"/>
                </factory>

                <!-- otherwise use Xalan -->
                <factory name="org.apache.xalan.processor.TransformerFactoryImpl" unless:true="${saxon.processor}">
                </factory>

                <!-- TODO xslt task has it's own way of processing fileset - might be quicker
                     so this would fold -file and -fileset together. use mapper for output file? -->

                <!-- IDEA can we load catalog from JAR file? do we need to? -->
                <xmlcatalog if:set="xpants.catalog">
                    <catalogpath>
                        <pathelement location="${xpants.catalog}"/>
                    </catalogpath>
                </xmlcatalog>

                <params.xslt/>

                <!-- IDEA could remove need for a-s-dir if we could put input fileset here conditionally
                     but how would this work with destdir/@{output} ??? and we have params.xslt as implicit
                     fileset

                     this could have nice synergy with the apply-transform-list-file macro
                     -->

            </xslt>

            <if>
                <!-- if @{output} is blank, overwrite the input file -->
                <equals arg1="@{output}" arg2=""/>
                <then>
                    <copy file="${temp.file}" tofile="@{file}" overwrite="true"/>
                </then>

                <!-- if @{output} is a dir, copy new file + ext to output -->
                <elseif>
                    <available file="@{output}" type="dir"/>
                    <then>
                        <!-- get file extension -->
                        <local name="suffix.name"/>
                        <propertyregex property="suffix.name" input="@{file}" regexp=".*\.(.*)" select="\1"/>

                        <!-- get file root name -->
                        <local name="file.name"/>
                        <basename property="file.name" file="@{file}" suffix="${suffix.name}"/>

                        <!-- if no extension given use existing one, no leading "." -->
                        <local name="file.ext"/>
                        <condition property="file.ext" value="${suffix.name}" else="@{ext}">
                            <equals arg1="@{ext}" arg2=""/>
                        </condition>

                        <!-- if ${output.dir} is set, copy to that dir with new filename and ext -->
                        <copy file="${temp.file}" tofile="@{output}/${file.name}.${file.ext}" overwrite="true"/>
                    </then>
                </elseif>

                <!-- only other option is that @{output} is a file to be created -->
                <else>
                    <copy file="${temp.file}" tofile="@{output}" overwrite="true" force="true"/>
                </else>
            </if>

        </sequential>
    </macrodef>


    <macrodef
        name="apply-transform-fileset"
        description="Apply a stylsheet to all files in a folder">

        <attribute
            name="xslt"
            description="XSLT file to be applied"/>

        <attribute
            name="ext"
            default=""
            description="Extension of output file(s)"/>

        <attribute
            name="output"
            description="Path for output files"/>

        <element
            name="input.files"
            optional="true"
            implicit="true"
            description="A fileset specification"/>

        <sequential>

            <!-- fail if input.files is empty -->
            <check-fileset-empty macro="apply-transform-fileset">
                <input.files/>
            </check-fileset-empty>

            <!-- make output dir if needed -->
            <mkdir dir="@{output}"/>

            <!-- check output has been created and is a dir -->
            <check-dir-exists macro="apply-transform-fileset" dir="@{output}"/>

            <!-- apply stylesheet to files in fileset -->
            <property name="for.keepgoing" value="true"/>

            <for param="file" keepgoing="${for.keepgoing}">
                <input.files/>

                <sequential>

                    <!-- NOTE set file ext in apply-transform-file because it is independant of transform -->
                    <apply-transform-file file="@{file}" xslt="@{xslt}" ext="@{ext}" output="@{output}"/>

                </sequential>
            </for>

        </sequential>
    </macrodef>


    <macrodef
        name="apply-transform-list-file"
        description="Apply a series of stylesheets to a file">

        <attribute
            name="file"
            description="Source file"/>

        <attribute
            name="xslt-list"
            default=""
            description="Comma separated list of stylesheets to be applied"/>

        <attribute
            name="output"
            default=""
            description="Final output file (default: overwrite source file)"/>

        <sequential>

            <!-- fail if file does not exist -->
            <check-file-exists macro="apply-transform-list-file" file="@{file}"/>

            <!-- fail if no stylesheets supplied -->
            <check-value-set prefix="[apply-transform-list-file]" name="xslt-list" value="@{xslt-list}"/>

            <!-- set up output if not blank -->
            <copy file="@{file}" tofile="@{output}" unless:blank="@{output}"/>

            <!-- apply stylesheets in order -->
            <property name="for.keepgoing" value="true"/>

            <for list="@{xslt-list}" param="xslt" keepgoing="${for.keepgoing}">
                <sequential>

                    <!-- if @{output} is blank then overwrite @{file}, otherwise overwrite @{output} -->
                    <apply-transform file="@{file}" xslt="@{xslt}" if:blank="@{output}"/>

                    <apply-transform file="@{output}" xslt="@{xslt}" unless:blank="@{output}"/>

                </sequential>
            </for>

        </sequential>
    </macrodef>


    <macrodef
        name="apply-transform-list-fileset"
        description="Apply a series of stylesheets to all files in a fileset">

        <attribute
            name="xslt-list"
            default=""
            description="Comma separated list of stylesheets to be applied"/>

        <attribute
            name="ext"
            default=""
            description="Extension of output file(s)"/>

        <attribute
            name="output"
            description="Output directory"/>

        <element
            name="input.files"
            optional="true"
            implicit="true"
            description="A fileset specification"/>

        <sequential>

            <!-- fail if input.files is empty -->
            <check-fileset-empty macro="apply-transform-list-fileset">
                <input.files/>
            </check-fileset-empty>

            <!-- fail if no stylesheets supplied -->
            <check-value-set prefix="[apply-transform-list-fileset]" name="xslt-list" value="@{xslt-list}"/>

            <!-- make output dir if needed -->
            <mkdir dir="@{output}"/>

            <!-- check output has been created and is a dir -->
            <check-dir-exists macro="apply-transform-list-fileset" dir="@{output}"/>

            <!-- apply stylesheet list to files in fileset -->
            <property name="for.keepgoing" value="true"/>

            <for param="file" keepgoing="${for.keepgoing}">
                <input.files/>

                <sequential>

                    <!-- check for actual extension, might be .xsl -->
                    <local name="output.ext"/>
                    <propertyregex property="output.ext" input="@{file}" regexp=".*\.(.*)" select="\1"/>

                    <local name="output.name"/>
                    <basename property="output.name" file="@{file}" suffix=".${output.ext}"/>

                    <!-- NOTE set file ext here because we're setting output dir here -->
                    <apply-transform-list-file file="@{file}" xslt="@{xslt}" output="@{output}/${output.name}.${output.ext}"/>

                </sequential>
            </for>

        </sequential>
    </macrodef>


    <macrodef
        name="apply-transform-template"
        description="Run a stylesheet using an initial template">

        <attribute
            name="xslt"
            description="XSLT file to be executed"/>

        <attribute
            name="template"
            description="Initial template"/>

        <element
            name="args"
            optional="true"
            implicit="true"
            description="Additional parameters"/>

        <sequential>

            <!-- TODO make list of JAR files in ${ant.library.dir} and ${user.home}/.ant/lib that contain the string
                 'saxon'. use this to get ${saxon.jar} -->

            <fail message="[apply-transform-template] 'saxon.jar' property not set">
                <condition>
                    <not><isset name="saxon.jar"/></not>
                </condition>
            </fail>

            <check-file-exists macro="apply-transform-template" file="${saxon.jar}"/>

            <!-- TODO check xslt exists (or is in standard library?) -->

            <!-- apply stylesheet using initial template -->
            <!-- FIXME cannot use @classname = net.sf.saxon.Transform for some reason -->
            <java
                jar="${saxon.jar}"
                logerror="true"
                fork="true"
                failonerror="true">

                <arg prefix="-xsl:" file="@{xslt}"/>
                <arg prefix="-it:" value="@{template}"/>

                <args/>
            </java>

        </sequential>
    </macrodef>

</project>
