<?xml version="1.0" encoding="UTF-8"?>

<project name="git"
    xmlns:if="ant:if"
    xmlns:unless="ant:unless">

    <description>
---
project:      XML Practical ANT Scripts
title:        git.xml
date:         2018-02-14
author:       Philip Hodder
contact:      philip.hodder@encodis.com
summary:      Macro definitions to use git commands within a build file
...

# git.xml

A set of macro definitions to use *git* commands within a build file. The basic
'git' macro is defined, along with others that set properties using the results
of certain *git* commands like "status" and "branch".

## Usage

Check the current *git* branch name matches the current version number:

```
&lt;property name="version" value="v1.2"/&gt;

&lt;git-branch-name pattern="release/${version}"&gt;
```

## Dependencies

*  The *git* executable must be installed and available on the PATH.

## Properties

The following properties can be set on the command line to override the default behaviour:

*  *git.exe*  The name of the *git* executable


## Change Log

##### 2018-02-14 (PH) Initial version

    </description>

    <!-- load ant-contrib -->
    <taskdef resource="net/sf/antcontrib/antlib.xml"/>

    <!-- include macros/properties -->
    <dirname property="xpants.dir" file="${ant.file.git}"/>

    <include file="${xpants.dir}/file-utils.xml"/>
    <include file="${xpants.dir}/attr-checks.xml"/>


    <!-- macros -->

    <macrodef
        name="git"
        description="Run git with command line arguments">

        <attribute
            name="command"
            description="git command to run"/>

        <attribute
            name="dir"
            default="."
            description="Directory in which to run the git command"/>

        <attribute
            name="property"
            default=""
            description="Name of the property to store the result in"/>

        <element
            name="args"
            optional="true"
            description="Remaining command line arguments"/>

        <sequential>

            <!-- fail if required attributes not set -->
            <check-attr-set macro="git" name="command" value="@{command}"/>

            <!-- find git.exe -->
            <check-exe-path property="git.exe" unless:set="git.exe"/>

            <!-- run git command -->
            <echo message="[git] command=@{command}" if:true="${xpants.debug}"/>

            <property name="exec.failonerror" value="true"/>

            <exec
                executable="${git.exe}"
                dir="@{dir}"
                outputproperty="@{property}"
                failonerror="${exec.failonerror}">
                <arg value="@{command}"/>
                <args/>
            </exec>

            <echo message="[git] output=${@{property}}" if:true="${xpants.debug}"/>

        </sequential>
    </macrodef>


    <!-- TODO there may be an issue with property names, always prefix local properties in macros
         with the macro's name for uniqueness. this might be because macros are calling Macros
         and 'local' does not mean what you think it does it that context -->

    <macrodef
        name="git-branch"
        description="Create a property with the current branch name">

        <attribute
            name="property"
            description="Property containing the branch name"/>

        <sequential>

            <!-- fail if required attributes not set -->
            <check-attr-set macro="git-branch" name="property" value="@{property}"/>

            <local name="git.branch.name"/>

            <git command="rev-parse" property="git.branch.name">
                <args>
                    <arg value="--abbrev-ref"/>
                    <arg value="HEAD"/>
                </args>
            </git>

            <fail message="[git-branch] current folder is not a git repository">
                <condition>
                    <matches string="${git.branch.name}" pattern="^fatal: Not a git repository*"/>
                </condition>
            </fail>

            <property name="@{property}" value="${git.branch.name}"/>

            <echo message="[git-branch] @{property}=${git.branch.name}" if:true="${xpants.debug}"/>

        </sequential>
    </macrodef>


    <macrodef
        name="git-tag"
        description="Create an annotated tag">

        <attribute
            name="tag"
            description="Tag value"/>

        <attribute
            name="message"
            description="Tag message"/>

        <sequential>

            <!-- fail if required attributes not set -->
            <check-attr-set macro="git-tag" name="tag" value="@{tag}"/>
            <check-attr-set macro="git-tag" name="message" value="@{message}"/>

            <git command="tag">
                <args>
                    <arg value="--annotate"/>
                    <arg value="@{tag}"/>
                    <arg value="--message='@{message}'"/>
                </args>
            </git>

            <echo message="[git-tag] tag='@{tag}' message='@{message}'" if:true="${xpants.debug}"/>

        </sequential>
    </macrodef>


    <macrodef
        name="git-latest-tag"
        description="Get the latest tag on the current branch">

        <attribute
            name="property"
            description="Property containing the tag"/>

        <sequential>

            <!-- fail if required attributes not set -->
            <check-attr-set macro="git-latest-tag" name="property" value="@{property}"/>

            <local name="git.latest.tag"/>

            <git command="describe" property="git.latest.tag">
                <args>
                    <arg value="--abbrev=0"/>
                    <arg value="--tags"/>
                </args>
            </git>

            <fail message="[git-latest-tag] no tags found in branch">
                <condition>
                    <matches string="${git.latest.tag}" pattern="^fatal: No names found, cannot describe anything"/>
                </condition>
            </fail>

            <property name="@{property}" value="${git.latest.tag}"/>

            <echo message="[git.latest.tag] @{property}=${git.latest.tag}" if:true="${xpants.debug}"/>

        </sequential>
    </macrodef>


    <macrodef
        name="git-commit"
        description="Stage all files and commit">

        <attribute
            name="message"
            description="Commit message"/>

        <sequential>

            <!-- fail if required attributes not set -->
            <check-attr-set macro="git-commit" name="message" value="@{message}"/>

            <git command="commit">
                <args>
                    <arg value="--all"/>
                    <arg value="--message=@{message}"/>
                </args>
            </git>

            <echo message="[git-commit] message='@{message}'" if:true="${xpants.debug}"/>

        </sequential>
    </macrodef>


    <macrodef
        name="git-status"
        description="Create a property with current git status">

        <!--
            NOTE: The "git status" command always creates a property, but it might have a length
            of 0 if all files are up to date. Therefore desired "property" specified by the
            attribute is only set if the output of the command has a length greater than 0.
        -->

        <attribute
            name="property"
            description="Property containing the status"/>

        <sequential>

            <!-- fail if required attributes not set -->
            <check-attr-set macro="git-status" name="property" value="@{property}"/>

            <local name="git.status"/>
            <git command="status" property="git.status">
                <args>
                    <arg value="--porcelain"/>
                </args>
            </git>

            <condition property="@{property}" value="${git.status}">
                <and>
                    <isset property="git.status"/>
                    <length string="${git.status}" when="greater" length="0"/>
                </and>
            </condition>

            <echo message="[git-status] @{property}=${git.status}" if:true="${xpants.debug}"/>

        </sequential>
    </macrodef>


    <macrodef
        name="git-check-outstanding-commits"
        description="Fail the build if there are outstanding commits on the current branch">

        <sequential>

            <local name="outstanding.commits"/>
            <git-status property="outstanding.commits"/>

            <fail message="[git-has-outstanding-commits] current git branch has outstanding commits" if="outstanding.commits"/>

        </sequential>
    </macrodef>


    <macrodef
        name="git-check-repo"
        description="Fail the build if not in a git repository">

        <sequential>

            <local name="git.branch.name"/>

            <git command="rev-parse" property="git.branch.name">
                <args>
                    <arg value="--abbrev-ref"/>
                    <arg value="HEAD"/>
                </args>
            </git>

            <fail message="[git-check-repo] current folder is not a git repository">
                <condition>
                    <matches string="${git.branch.name}" pattern="^fatal: Not a git repository*"/>
                </condition>
            </fail>

        </sequential>
    </macrodef>


    <macrodef
        name="git-check-branch"
        description="Fail the build if the current branch name does not match the pattern">

        <attribute
            name="pattern"
            description="Name of branch to match"/>

        <sequential>

            <!-- fail if required attributes not set -->
            <check-attr-set macro="git-check-branch" name="pattern" value="@{pattern}"/>

            <local name="git.branch.name"/>
            <git-branch property="git.branch.name"/>

            <!-- TODO the pattern needs to be a regexp -->

            <fail message="[git-check-branch] current git branch '${branch.name}' does not match '@{pattern}'">
                <condition>
                    <not><equal arg1="${git.branch.name}" arg2="@{pattern}"/></not>
                </condition>
            </fail>

        </sequential>
    </macrodef>


</project>
