<?xml version="1.0" encoding="UTF-8"?>

<project name="deploy-files"
    xmlns:if="ant:if"
    xmlns:unless="ant:unless">

    <description>
---
project:      XML Practical ANT Scripts
title:        deploy-files.xml
date:         2018-02-20
author:       Philip Hodder
contact:      philip.hodder@encodis.com
summary:      Macro definitions to use deploy files to a location
...

# deploy-files.xml

A set of macro definitions to deploy sets of files to a designated location. The first
macro ('deploy-file') simply copies a file to a target folder, unless the file
already exists there. The macro can be told to overwrite the file if necessary.

The second macro ('deploy-files') does the same but for either an implicit fileset or a source
folder. This macro can also delete the target folder first (*clean=target*) and remove the directory
structure of the source files (*flatten=true*).

The *method* attribute can be explicitly set to the following values:

*   'copy' This is the default, and uses the native ANT 'copy' task. This presupposes that the
*target* is reachable on the local machine or suitable network share etc.
*   'sync' This uses the native ANT 'sync' task. This presupposes that the *target* is reachable on
the local machine or suitable network share etc. This may help with performance in some cases (e.g.
a target needs updating but not many files have changed). The *flatten* and *clean* options are
ignored.
*   'scp' This use the SSH secure copy program. In this case the properties *ssh.host*, *ssh.user*
and *ssh.keys* must also be set as described in the [ssh](ssh.html) macro before calling
*deploy-files* with this method. Also in this case the *target* attribute should start with the root
location on the host (e.g. "/www" for a web server). The *clean* option can be set to clean the
*target* folder.
*   'aws' This uses the AWS CLI program to synchronise to an S3 bucket. The properties *aws.profile*
and *aws.bucket* must also be set as described in the [aws](aws.html) macro before calling
*deploy-files* with this method. The *flatten*, *clean* and *overwrite* options are ignored.

## Usage

```
&lt;property name="deploy.target" value="${project.deploy.area}/${project.name}"/&gt;

&lt;deploy-files
&#9;target="${deploy.target}/docs"&gt;
&#9;&lt;fileset&gt;
&#9;&#9;&lt;include name="build/*.html"/&gt;
&#9;&lt;/fileset&gt;
&lt;/deploy-files&gt;
```

Deploy different filesets for 'latest' and 'versioned' files:

```
&lt;deploy-files
&#9;target="\\myfile.share\${department}\${assets}"&gt;
&#9;&lt;fileset&gt;
&#9;&#9;&lt;fileset dir="." includes="build/*.dat"/&gt;
&#9;&lt;/fileset&gt;
&lt;/deploy-files&gt;

&lt;deploy-files
&#9;target="\\myfile.share\${department}\${assets}\v1.2"&gt;
&#9;&lt;fileset dir="."&gt;
&#9;&#9;&lt;include name="build/*.dat"/&gt;
&#9;&#9;&lt;include name="docs/*.html"/&gt;
&#9;&lt;/fileset&gt;
&lt;/deploy-files&gt;
```

## Dependencies

* ${xpants.dir}/aws.xml
* ${xpants.dir}/ssh.xml
* ${xpants.dir}/attr-checks.xml
* ${xpants.dir}/file-utils.xml

## Properties

Override the following property to force a deployment method:

*   *deploy.method* The default is 'copy'. Alternatives are 'sync', 'ssh' and 'aws'.

The following properties are required when using the 'scp' method:

*   *ssh.host*
*   *ssh.user*
*   *ssh.keys*

The following properties are required when using the 'aws' method:

*   *aws.profile*
*   *aws.bucket*


## Change Log

##### 2018-02-15 (PH) Initial version

    </description>

    <!-- include macros/properties -->
    <dirname property="xpants.dir" file="${ant.file.deploy-files}"/>

    <include file="${xpants.dir}/aws.xml"/>
    <include file="${xpants.dir}/ssh.xml"/>
    <include file="${xpants.dir}/attr-checks.xml"/>
    <include file="${xpants.dir}/file-utils.xml"/>

    <!-- macros -->

    <macrodef
        name="deploy-file"
        description="Deploy a file to a designated target folder">

        <attribute
            name="file"
            description="File to deploy"/>

        <attribute
            name="target"
            description="Destination folder for deployment"/>

        <attribute
            name="overwrite"
            default="false"
            description="Overwrite the target file if it exists [true,false]"/>

        <sequential>

            <!-- fail if required attributes not set -->
            <check-attr-set macro="deploy-file" name="file" value="@{file}"/>
            <check-attr-set macro="deploy-file" name="target" value="@{target}"/>

            <!-- check that @{file} exists -->
            <check-file-exists macro="deploy-file" file="@{file}"/>

            <!-- get base filename -->
            <local name="file.name"/>
            <basename property="file.name" file="@{file}"/>

            <!-- check if file exists in target folder and can be overwritten -->
            <local name="target.exists"/>
            <available property="target.exists" file="@{target}/${file.name}" type="file"/>

            <fail message="[deploy-file] '@{file}' exists in target folder '@{target}' and will not be overwritten">
                <condition>
                    <and>
                        <istrue value="${target.exists}"/>
                        <isfalse value="@{overwrite}"/>
                    </and>
                </condition>
            </fail>

            <!-- make target folder if it does not exist -->
            <mkdir dir="@{target}" unless:true="${target.exists}"/>

            <!-- copy file -->
            <copy file="@{file}" todir="@{target}" overwrite="true" verbose="${macro.debug}"/>

            <!-- TODO use/detect alternate deploy methods -->

        </sequential>
    </macrodef>

    <macrodef
        name="deploy-files"
        description="Deploy a set of files to a location designated by the deployment environment and target">

        <attribute
            name="target"
            description="Root destination folder for deployment"/>

        <attribute
            name="source"
            default=""
            description="Directory to deploy, if fileset not specified"/>

        <attribute
            name="flatten"
            default="false"
            description="Flatten the input fileset directory structure [true,false]"/>

        <attribute
            name="clean"
            default="none"
            description="Remove target directory before deploying [target,files,none]"/>

        <attribute
            name="overwrite"
            default="false"
            description="Overwrite the target directory if it exists [true,false]"/>

        <attribute
            name="method"
            default="copy"
            description="Method to use to copy the fileset to the target folder [copy,sync,scp,aws]"/>

            <!-- TODO method=auto, would work out best method based on @target (e.g. starts with "\\" or contains "http" etc) -->

        <element
            name="deploy.files"
            optional="true"
            implicit="true"
            description="A fileset specification"/>

        <sequential>

            <!-- fail if required attributes not set -->
            <check-attr-set macro="deploy-file" name="target" value="@{target}"/>

            <!-- check fileset/source combinations -->
            <check-fileset-empty macro="deploy-files" if:blank="@{source}">
                <deploy.files/>
            </check-fileset-empty>

            <check-dir-exists macro="deploy-files" dir="@{source}" unless:blank="@{source}"/>

            <!-- fail if @{clean} not specified correctly -->
            <check-attr-list macro="deploy-files" name="clean" value="@{clean}" list="target,files,none"/>

            <!-- choose deploy method -->
            <!-- TODO detect best deploy method based on target characteristics -->

            <property name="deploy.method" value="@{method}"/>

            <!-- fail if @{method} or ${deploy.method} is not specified correctly -->
            <check-attr-list macro="deploy-files" name="method" value="${deploy.method}" list="copy,sync,scp,aws"/>

            <property name="method.${deploy.method}" value="true"/>

            <echo message="[deploy-files] method='@{method}', deploy.method='${deploy.method}'" if:true="${macro.debug}"/>

            <!-- deploy files -->

            <deploy-files-copy
                target="@{target}"
                source="@{source}"
                flatten="@{flatten}"
                clean="@{clean}"
                overwrite="@{overwrite}"
                if:set="method.copy">
                <deploy.files/>
            </deploy-files-copy>

            <deploy-files-sync
                target="@{target}"
                source="@{source}"
                overwrite="@{overwrite}"
                if:set="method.sync">
                <deploy.files/>
            </deploy-files-sync>

            <deploy-files-scp
                target="@{target}"
                source="@{source}"
                clean="@{clean}"
                if:set="method.scp">
                <deploy.files/>
            </deploy-files-scp>

            <deploy-files-aws
                target="@{target}"
                source="@{source}"
                if:set="method.aws">
                <deploy.files/>
            </deploy-files-aws>

        </sequential>
    </macrodef>

    <macrodef
        name="deploy-files-copy"
        description="Deploy a set of files to a target location folder, using ant copy">

        <attribute
            name="target"
            description="Root destination folder for deployment"/>

        <attribute
            name="source"
            default=""
            description="Directory to deploy, if fileset not specified"/>

        <attribute
            name="flatten"
            default="false"
            description="Flatten the input fileset directory structure [true,false]"/>

        <attribute
            name="clean"
            default="false"
            description="Remove target directory/files before deploying [target,files,none]"/>

        <attribute
            name="overwrite"
            default="false"
            description="Overwrite the target directory if it exists [true,false]"/>

        <element
            name="deploy.files"
            optional="true"
            implicit="true"
            description="A fileset specification"/>

        <sequential>

            <!-- fail if @{target} folder exists and will not be overwritten -->
            <local name="target.exists"/>
            <available property="target.exists" file="@{target}" type="dir"/>

            <fail message="[deploy-files] target folder '@{target}' exists and will not be overwritten">
                <condition>
                    <and>
                        <istrue value="${target.exists}"/>
                        <not><istrue value="@{overwrite}"/></not>
                    </and>
                </condition>
            </fail>

            <!-- determine which targets to clean -->
            <local name="clean.target"/>
            <condition property="clean.target" value="true">
                <equals arg1="@{clean}" arg2="target"/>
            </condition>

            <local name="clean.files"/>
            <condition property="clean.files" value="true">
                <and>
                    <equals arg1="@{clean}" arg2="files"/>
                    <available file="${deploy.root}@{target}" type="dir"/>
                </and>
            </condition>

            <!-- delete files _in_ target dir, but not target dir itself -->
            <delete includeemptydirs="true" verbose="${macro.debug}" if:true="${clean.files}">
                <fileset dir="${deploy.root}@{target}" includes="*.*"/>
            </delete>

            <!-- delete target dir and all children -->
            <delete dir="${deploy.root}@{target}" verbose="${macro.debug}" if:true="${clean.target}"/>

            <!-- make target folder if it does not exist -->
            <mkdir dir="${deploy.root}@{target}" unless:true="${target.exists}"/>

            <!-- copy files... -->
            <copy todir="${deploy.root}@{target}" overwrite="true" flatten="@{flatten}" verbose="${macro.debug}">
                <deploy.files if:blank="@{source}"/>
                <fileset dir="@{source}" includes="**/*" unless:blank="@{source}"/>
            </copy>

        </sequential>
    </macrodef>


    <macrodef
        name="deploy-files-sync"
        description="Deploy a set of files to a target location, using ant sync">

        <attribute
            name="target"
            description="Root destination folder for deployment"/>

        <attribute
            name="source"
            default=""
            description="Directory to deploy, if fileset not specified"/>

        <attribute
            name="overwrite"
            default="false"
            description="Overwrite the target directory if it exists [true,false]"/>

        <element
            name="deploy.files"
            optional="true"
            implicit="true"
            description="A fileset specification"/>

        <sequential>

            <!-- fail if @{target} folder exists and will not be overwritten -->
            <local name="target.exists"/>
            <available property="target.exists" file="@{target}" type="dir"/>

            <fail message="[deploy-files] target folder '@{target}' exists and will not be overwritten">
                <condition>
                    <and>
                        <istrue value="${target.exists}"/>
                        <not><istrue value="@{overwrite}"/></not>
                    </and>
                </condition>
            </fail>

            <!-- make target folder if it does not exist -->
            <mkdir dir="@{target}" unless:true="${target.exists}"/>

            <!-- synchronise files... -->
            <sync todir="@{target}" overwrite="false" verbose="${macro.debug}">
                <deploy.files if:blank="@{source}"/>
                <fileset dir="@{source}" includes="**/*" unless:blank="@{source}"/>
            </sync>

        </sequential>
    </macrodef>


    <macrodef
        name="deploy-files-scp"
        description="Deploy a set of files to a target location, using scp">

        <attribute
            name="target"
            description="Root destination folder for deployment"/>

        <attribute
            name="source"
            default=""
            description="Directory to deploy, if fileset not specified"/>

        <attribute
            name="clean"
            default="false"
            description="Remove target directory/files before deploying [target,files,none]"/>

        <element
            name="deploy.files"
            optional="true"
            implicit="true"
            description="A fileset specification"/>

        <sequential>

            <!-- check scp options -->
            <!-- NOTE have already checked that source/deploy are valid/not empty etc -->

            <!-- if @{source} is blank copy deploy fileset into temp folder, map to unix path conventions -->
            <property name="temp.dir" value="${java.io.tmpdir}"/>
            <property name="temp.delete" value="true"/>

            <local name="source.temp"/>
            <tempfile property="source.temp" destdir="${temp.dir}" prefix="deploy-files-scp" deleteonexit="${temp.delete}" if:blank="@{source}"/>

            <mkdir dir="${source.temp}" if:blank="@{source}"/>

            <copy todir="${source.temp}" if:blank="@{source}">
                <deploy.files/>
            </copy>

            <!-- determine which targets to clean -->
            <local name="clean.target"/>
            <condition property="clean.target" value="true">
                <equals arg1="@{clean}" arg2="target"/>
            </condition>

            <local name="clean.files"/>
            <condition property="clean.files" value="true">
                <equals arg1="@{clean}" arg2="files"/>
            </condition>

            <!-- clean folder ("target") or files ("target/*") -->
            <ssh-delete dir="@{target}" if:true="${clean.target}"/>
            <ssh-delete dir="@{target}/*" recursive="false" if:true="${clean.files}"/>

            <!-- make target folder (fails silently if already exists) -->
            <ssh-mkdir dir="@{target}"/>

            <!-- secure copy files... -->
            <ssh-copy target="@{target}" source="@{source}/*" unless:blank="@{source}"/>
            <ssh-copy target="@{target}" source="${source.temp}/." if:blank="@{source}"/>

            <!-- change file permissions (even though using "ca" user for this and Samba share?) -->
            <ssh-chmod dir="@{target}"/>
        </sequential>
    </macrodef>


    <macrodef
        name="deploy-files-aws"
        description="Deploy a set of files to a target location, using awscli">

        <attribute
            name="target"
            description="Root destination folder for deployment"/>

        <attribute
            name="source"
            default=""
            description="Directory to deploy, if fileset not specified"/>

        <element
            name="deploy.files"
            optional="true"
            implicit="true"
            description="A fileset specification"/>

        <sequential>

            <!-- check aws options -->
            <!-- NOTE have already checked that source/deploy are valid/not empty etc -->

            <!-- if @{source} is blank copy deploy fileset into temp folder, map to unix path conventions -->
            <property name="temp.dir" value="${java.io.tmpdir}"/>
            <property name="temp.delete" value="true"/>

            <local name="source.temp"/>
            <tempfile property="source.temp" destdir="${temp.dir}" prefix="deploy-files-aws" deleteonexit="${temp.delete}" if:blank="@{source}"/>

            <mkdir dir="${source.temp}" if:blank="@{source}"/>

            <copy todir="${source.temp}" if:blank="@{source}">
                <deploy.files/>
            </copy>

            <!-- sync source or source.temp, depending on how called -->
            <aws-s3-sync
                profile="${aws.profile}"
                source="@{source}"
                target="@{target}"
                bucket="${aws.bucket}" unless:blank="@{source}"/>

            <aws-s3-sync
                profile="${aws.profile}"
                source="${source.temp}"
                target="@{target}"
                bucket="${aws.bucket}" if:blank="@{source}"/>

        </sequential>
    </macrodef>

</project>
