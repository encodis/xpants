<?xml version="1.0" encoding="UTF-8"?>

<project name="extract-markdown"
    xmlns:if="ant:if"
    xmlns:unless="ant:unless">

    <description>
---
project:      XML Practical ANT Scripts
title:        extract-markdown.xml
date:         2018-05-02
author:       Philip Hodder
contact:      philip.hodder@encodis.com
summary:      Macro definitions to use extract Markdown documentation from files
...

# extract-markdown.xml

Macro definitions to extract documentation (as Markdown) embedded in various types of files. The
user can specifiy a stylesheet to use for the extraction. Successful extraction will depend on the
source files containing the relevant elements with the Markdown documentation.

* If the *file* attribute is not blank and refers to a file that exists then documentation
will be extracted from it, using the *output* attribute as the resulting file name for the report.
* If the *file* attribute is not supplied then the macro will extract Markdown from all files
in a folder determined by the 'input' element.

The type of extraction is determined by the *type* attribute. Currently this can be set to anything,
although if left blank it will try to determine the type from the file extension. This works fine
for Schematron (".sch") and XSLT (".xsl") files, but for ANT files the type will need to be given
explicitly (as they are usually just ".xml" files).

&gt; WARNING: The stylesheets used by these macros will also extract text node messages
embedded in &lt;echo&gt; and &lt;fail&gt; elements. Therefore use the "message" attribute
of these elements if possible.

## Usage

```
&lt;extract-markdown
&#9;file="${src.dir}/sample.sch"
&#9;output="${docs.dir}/sample.md"/&gt;
```

```
&lt;extract-markdown
&#9;file="${src.dir}/git.xml"
&#9;type="ant"
&#9;output="${docs.dir}/git.md"/&gt;
```

## Dependencies

These stylesheets are included using the default stylesheet mechanism described in
[apply-transform](apply-transform.html):

* __extract-markdown-from-ant.xsl:__ This is the standard stylesheet used to extract Markdown from
ANT scripts.
* __extract-markdown-from-sch.xsl:__ This is the standard stylesheet used to extract Markdown from
Schematron files.
* __extract-markdown-from-xslt.xsl:__ This is the standard stylesheet used to extract Markdown from
XSLT files.


## Change Log

##### 2018-02-15 (PH) Initial version

##### 2018-04-09 (PH) Macro naming alignment

    </description>

    <!-- load ant-contrib -->
    <taskdef resource="net/sf/antcontrib/antlib.xml"/>

    <!-- include macros/properties -->
    <dirname property="xpants.dir" file="${ant.file.extract-markdown}"/>

    <include file="${xpants.dir}/apply-transform.xml"/>
    <include file="${xpants.dir}/check-value.xml"/>
    <include file="${xpants.dir}/file-utils.xml"/>

    <!-- macros -->

    <macrodef
        name="extract-markdown"
        description="Extract Markdown documentation from files">

        <attribute
            name="file"
            default=""
            description="Source file"/>

        <attribute
            name="type"
            description="Source file type [ant,sch,xsl]"/>

        <attribute
            name="output"
            description="Path for extracted Markdown file(s)"/>

        <element
            name="input.files"
            optional="true"
            implicit="true"
            description="A fileset specification"/>

        <sequential>

            <!-- fail if required attributes not set -->
            <check-value-set prefix="[extract-markdown]" name="output" value="@{output}"/>
            <check-value-list prefix="[extract-markdown]" name="type" value="@{type}" list="ant,sch,xsl"/>

            <!-- file or fileset mode? -->
            <extract-markdown-file
                file="@{file}"
                type="@{type}"
                output="@{output}"
                unless:blank="@{file}"/>

            <extract-markdown-fileset
                type="@{type}"
                output="@{output}"
                if:blank="@{file}">
                <input.files/>
            </extract-markdown-fileset>

        </sequential>
    </macrodef>


    <macrodef
        name="extract-markdown-file"
        description="Extract Markdown documentation from a single file">

        <attribute
            name="file"
            description="Source file"/>

        <attribute
            name="type"
            default=""
            description="Source file type [ant,sch,xsl]"/>

        <attribute
            name="output"
            description="Path for extracted Markdown file"/>

        <sequential>

            <!-- fail if required attributes not set -->
            <check-value-set prefix="[extract-markdown-file]" name="file" value="@{file}"/>

            <!-- fail if file does not exist -->
            <check-file-exists macro="extract-markdown-file" file="@{file}"/>

            <!-- detect stylesheet to use, use file extension if not specified -->
            <!-- NOTE this will not be called if type is blank as parent macro will fail, so be careful -->
            <local name="file.ext"/>
            <propertyregex property="file.ext" input="@{file}" regexp="(.*)\.(.*)" select="\2"/>

            <local name="file.type"/>
            <condition property="file.type" value="${file.ext}" else="@{type}">
                <equals arg1="@{type}" arg2=""/>
            </condition>

            <check-value-list prefix="[extract-markdown-file]" name="file.type" value="${file.type}" list="ant,sch,xsl"/>

            <!-- get stylesheet name -->
            <local name="extract.stylesheet"/>
            <property name="extract.stylesheet" value="extract-markdown-from-${file.type}"/>

            <!-- extract markdown -->
            <apply-transform
                file="@{file}"
                output="@{output}"
                xslt="${extract.stylesheet}"/>

        </sequential>
    </macrodef>


    <macrodef
        name="extract-markdown-fileset"
        description="Extract Markdown documentation from a set of files">

        <attribute
            name="type"
            description="Source file type [ant,sch,xsl]"/>

        <attribute
            name="output"
            description="Path for extracted files"/>

        <element
            name="input.files"
            optional="false"
            implicit="true"
            description="A fileset specification"/>

        <sequential>

            <!-- fail if input fileset is empty -->
            <check-fileset-empty macro="extract-markdown-fileset">
                <input.files/>
            </check-fileset-empty>

            <!-- make output dir -->
            <mkdir dir="@{output}"/>

            <!-- check output has been created and is a dir -->
            <check-dir-exists macro="extract-markdown-fileset" dir="@{output}"/>

            <!-- extract macrkdown for all files in fileset -->
            <property name="for.keepgoing" value="true"/>

            <for param="file" keepgoing="${for.keepgoing}">
                <input.files/>

                <sequential>

                    <!-- check for actual extension, might be .xsl -->
                    <local name="output.ext"/>
                    <propertyregex property="output.ext" input="@{file}" regexp=".*\.(.*)" select="\1"/>

                    <local name="output.name"/>
                    <basename property="output.name" file="@{file}" suffix=".${output.ext}"/>

                    <extract-markdown-file file="@{file}" type="@{type}" output="@{output}/${output.name}.md"/>

                </sequential>
            </for>

        </sequential>
    </macrodef>

</project>
