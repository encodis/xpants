<?xml version="1.0" encoding="UTF-8"?>

<project
    name="tidy"
    xmlns:if="ant:if"
    xmlns:unless="ant:unless">

    <description>
---
Project:    XPants
Title:      tidy.xml
Date:       2018-02-14
Author:     Philip Hodder
Contact:    philip.hodder@encodis.com
Summary:    Macros to run HTML Tidy
...

# tidy.xml

This module defines macros for processing content using 'tidy'. The first processes
individual files and the second processes entire trees by way of a fileset.

*  If the _file_ attribute is not blank and refers to a file that exists then it will be
converted.
*  If the _file_ attribute is not supplied then the macro will convert all files in a
folder determined by the 'input-fileset' element and place them in the _output_ folder
with the same name. If the 'input-fileset' is empty the macro will fail.

&gt; NOTE: It is the responsibility of the calling task to ensure that any output folders are
created before running this task.

## Usage

Basic usage:

```
&gt;tidy
&#9;file="src/index.html"
&#9;output="build/index.html"/&lt;
```

Use the _params_ property to set various command line options, e.g.:

```
&gt;tidy
&#9;file="src/index.html"
&#9;output="build/index.html"
&#9;params="-indent -omit"/&lt;
```

## Dependencies

### Executables

*  The *tidy* executable must be installed and on the PATH.

## Properties

*  The **find-exe** macro will be used to set the *tidy.exe* property to the location of the
*tidy* executable. Override on the command line if required.

## Change Log

##### 2018-02-14 (PH) Initial version

    </description>

    <!-- load ant-contrib -->
    <taskdef resource="net/sf/antcontrib/antlib.xml"/>

    <!-- include macros/properties -->
    <property environment="env"/>

    <dirname property="xpants.dir" file="${ant.file.tidy}"/>
    <property file="${xpants.dir}/xpants.properties"/>

    <include file="${xpants.dir}/find-exe.xml"/>
    <include file="${xpants.dir}/attr-checks.xml"/>
    <include file="${xpants.dir}/file-checks.xml"/>

    <!-- macros -->

    <macrodef
        name="tidy"
        description="Tidy HTML files">

        <attribute
            name="file"
            default=""
            description="Source HTML file"/>

        <attribute
            name="config"
            default=""
            description="Path to HTML Tidy configuration file"/>

        <attribute
            name="params"
            default=""
            description="Additional parameters and options"/>

        <attribute
            name="output"
            default=""
            description="Path for output file(s)"/>

        <element
            name="input.files"
            optional="true"
            implicit="true"
            description="A fileset specification"/>

        <sequential>

            <!-- fail if required attributes not set -->
            <check-attr-set macro="tidy" name="output" value="@{output}"/>

            <!-- file or dir mode? -->
            <tidy-file
                file="@{file}"
                config="@{config}"
                params="@{params}"
                output="@{output}"
                unless:blank="@{file}"/>

            <tidy-dir
                config="@{config}"
                params="@{params}"
                output="@{output}"
                if:blank="@{file}">
                <input.files/>
            </tidy-dir>

        </sequential>
    </macrodef>


    <macrodef
        name="tidy-file"
        description="Run tidy on a single HTML file">

        <attribute
            name="file"
            description="Path to the input file"/>

        <attribute
            name="config"
            default=""
            description="Path to HTML Tidy configuration file"/>

        <attribute
            name="params"
            default=""
            description="Additional parameters and options"/>

        <attribute
            name="output"
            default=""
            description="Path for the output file"/>

        <sequential>

            <!-- fail if required attributes not set -->
            <check-attr-set macro="tidy-file" name="file" value="@{file}"/>

            <!-- find tidy.exe -->
            <find-exe property="tidy.exe" unless:set="tidy.exe"/>

            <property name="exec.failonerror" value="true"/>

            <!-- run tidy -->
            <exec
                executable="${tidy.exe}"
                output="@{output}"
                failonerror="${exec.failonerror}">
                <arg line="-config @{config}" unless:blank="@{config}"/>
                <arg line="-file @{file}"/>
                <arg line="@{params}"/>
            </exec>

        </sequential>
    </macrodef>


    <macrodef
        name="tidy-dir"
        description="Run tidy on a folder of HTML files">

        <attribute
            name="config"
            default=""
            description="Path to HTML Tidy configuration file"/>

        <attribute
            name="params"
            default=""
            description="Additional parameters and options"/>

        <attribute
            name="output"
            default=""
            description="Path for output file(s)"/>

        <element
            name="input.files"
            optional="false"
            implicit="true"
            description="A fileset specification"/>

        <sequential>

            <!-- fail if inpur fileset is empty -->
            <check-fileset-empty macro="tidy-dir">
                <input.files/>
            </check-fileset-empty>

            <property name="for.keepgoing" value="true"/>

            <for param="file" keepgoing="${for.keepgoing}">
                <input.files/>

                <sequential>

                    <!-- get local name -->
                    <local name="output.name"/>
                    <basename property="output.name" file="@{file}" suffix=".html"/>

                    <!-- get file extension, defaults to .html -->
                    <local name="output.ext"/>
                    <condition property="output.ext" value=".xml">
                        <contains string="@{params}" substring="-xml"/>
                    </condition>

                    <condition property="output.ext" value=".xhtml">
                        <or>
                            <contains string="@{params}" substring="-asxml"/>
                            <contains string="@{params}" substring="-asxhtml"/>
                        </or>
                    </condition>

                    <property name="output.ext" value=".html"/>

                    <!-- process file -->
                    <tidy-file
                        file="@{file}"
                        config="@{config}"
                        params="@{params}"
                        output="@{output}/${output.name}${output.ext}"/>

                </sequential>
            </for>

        </sequential>
    </macrodef>

</project>
