<?xml version="1.0" encoding="UTF-8"?>

<project name="pandoc"
    xmlns:if="ant:if"
    xmlns:unless="ant:unless">

    <description>
---
project:      XML Practical ANT Scripts
title:        pandoc.xml
date:         2018-02-14
author:       Philip Hodder
contact:      philip.hodder@encodis.com
summary:      Macro definitions to process files using pandoc
...

# pandoc.xml

A set of macro definitions to work with *python* modules.

## Usage

To converts a folder of Markdown files into standalone HTML files:

```
&lt;pandoc
&#9;output="${build.dir}/manual"
&#9;to="html"
&#9;options="self-contained"&gt;
&#9;&lt;fileset dir="${docs.dir}" includes="*.md"/&gt;
&lt;pandoc&gt;
```

## Dependencies

*  The *pandoc* executable must be installed and available on the PATH.

## Properties

The following properties can be set on the command line to override the default behaviour:

*  *pandoc.exe*  The name of the *pandoc* executable

## Change Log

##### 2018-02-14 (PH) Initial version

    </description>

    <!-- load ant-contrib -->
    <taskdef resource="net/sf/antcontrib/antlib.xml"/>

    <!-- include macros/properties -->
    <dirname property="xpants.dir" file="${ant.file.pandoc}"/>

    <include file="${xpants.dir}/attr-checks.xml"/>
    <include file="${xpants.dir}/file-checks.xml"/>

    <!-- macros -->

    <macrodef
        name="pandoc"
        description="Run pandoc with parameters">

        <attribute
            name="file"
            default=""
            description="Source file"/>

        <attribute
            name="from"
            default="markdown+smart"
            description="Input format"/>

        <attribute
            name="to"
            default="html5"
            description="Output format"/>

        <attribute
            name="options"
            default="standalone,self-contained"
            description="List of options"/>

        <attribute
            name="datadir"
            default=""
            description="Pandoc data directory"/>

        <attribute
            name="template"
            default=""
            description="Template file"/>

        <attribute
            name="style"
            default=""
            description="Style"/>

        <attribute
            name="filters"
            default=""
            description="List of filters"/>

        <attribute
            name="lua-filters"
            default=""
            description="List of Lua filters"/>

        <attribute
            name="variables"
            default=""
            description="List of variables"/>

        <attribute
            name="output"
            description="Path for output file(s)"/>

        <element
            name="input.files"
            optional="true"
            implicit="true"
            description="A fileset specification"/>

        <sequential>

            <!-- fail if required attributes not set -->
            <check-attr-set macro="pandoc" name="format" value="@{format}"/>
            <check-attr-set macro="pandoc" name="output" value="@{output}"/>

            <!-- file or dir mode? -->
            <pandoc-file
                file="@{file}"
                from="@{from}"
                to="@{to}"
                options="@{options}"
                datadir="@{datadir}"
                template="@{template}"
                style="@{style}"
                filters="@{filters}"
                lua-filters="@{lua-filters}"
                variables="@{variables}"
                output="@{output}"
                unless:blank="@{file}"/>

            <pandoc-dir
                from="@{from}"
                to="@{to}"
                options="@{options}"
                datadir="@{datadir}"
                template="@{template}"
                style="@{style}"
                filters="@{filters}"
                lua-filters="@{lua-filters}"
                variables="@{variables}"
                output="@{output}"
                if:blank="@{file}">
                <input.files/>
            </pandoc-dir>

        </sequential>
    </macrodef>


    <macrodef
        name="pandoc-file"
        description="Run pandoc on single file, with parameters">

        <attribute
            name="file"
            description="Input file"/>

        <attribute
            name="from"
            default="markdown+smart"
            description="Input format"/>

        <attribute
            name="to"
            default="html5"
            description="Output format"/>

        <attribute
            name="options"
            default=""
            description="List of options"/>

        <attribute
            name="datadir"
            default=""
            description="Pandoc data directory"/>

        <attribute
            name="template"
            default=""
            description="Template file"/>

        <attribute
            name="style"
            default=""
            description="CSS stylesheet"/>

        <attribute
            name="filters"
            default=""
            description="List of filters"/>

        <attribute
            name="lua-filters"
            default=""
            description="List of Lua filters"/>

        <attribute
            name="variables"
            default=""
            description="List of variables"/>

        <attribute
            name="output"
            description="Output file"/>

        <sequential>

            <!-- fail if required attributes not set -->
            <check-attr-set macro="pandoc-file" name="file" value="@{file}"/>
            <check-attr-set macro="pandoc-file" name="from" value="@{from}"/>
            <check-attr-set macro="pandoc-file" name="to" value="@{to}"/>
            <check-attr-set macro="pandoc-file" name="output" value="@{output}"/>

            <!-- fail if file does not exist -->
            <check-file-exists macro="pandoc-file" file="@{file}"/>

            <!-- check if pandoc executable is available -->
            <check-exe-path property="pandoc.exe" windows="pan-doc.exe" unless:set="pandoc.exe"/>

            <!-- convert options -->
            <local name="options.list"/>
            <propertyregex
                property="options.list"
                input="@{options}"
                regexp="^|,"
                replace=" --"
                global="true"/>

            <!-- convert filters -->
            <local name="filters.list"/>
            <propertyregex
                property="filters.list"
                input="@{filters}"
                regexp="^|,"
                replace=" --filter="
                global="true"/>

            <!-- convert Lua filters -->
            <local name="lua-filters.list"/>
            <propertyregex
                property="lua-filters.list"
                input="@{lua-filters}"
                regexp="^|,"
                replace=" --lua-filter="
                global="true"/>

            <!-- convert variables -->
            <local name="variables.list"/>
            <propertyregex
                property="variables.list"
                input="@{variables}"
                regexp="^|,"
                replace=" --variable="
                global="true"/>

            <!-- TODO allow for multiple CSS stylesheets -->

            <!-- run pandoc -->
            <exec
                executable="${pandoc.exe}"
                searchpath="true"
                dir=".">
                <arg value="--from=@{from}"/>
                <arg value="--to=@{to}"/>
                <arg line="${options.list}" unless:blank="@{options}"/>
                <arg value="--template=@{template}" unless:blank="@{template}"/>
                <arg value="--css=@{style}" unless:blank="@{style}"/>
                <arg value="--data-dir=@{datadir}" unless:blank="@{datadir}"/>
                <arg line="${filters.list}" unless:blank="@{filters}"/>
                <arg line="${lua-filters.list}" unless:blank="@{lua-filters}"/>
                <arg line="${variables.list}" unless:blank="@{variables}"/>
                <arg value="--output=@{output}"/>

                <arg value="@{file}"/>
            </exec>

        </sequential>
    </macrodef>

    <macrodef
        name="pandoc-dir"
        description="Run pandoc on folder, with parameters">

        <attribute
            name="from"
            default="markdown+smart"
            description="Input format"/>

        <attribute
            name="to"
            default="html5"
            description="Output format"/>

        <attribute
            name="options"
            default=""
            description="List of options"/>

        <attribute
            name="datadir"
            default=""
            description="Pandoc data directory"/>

        <attribute
            name="template"
            default=""
            description="Template file"/>

        <attribute
            name="style"
            default=""
            description="Style"/>

        <attribute
            name="filters"
            default=""
            description="List of filters"/>

        <attribute
            name="lua-filters"
            default=""
            description="List of Lua filters"/>

        <attribute
            name="variables"
            default=""
            description="List of variables"/>

        <attribute
            name="output"
            description="Path for converted files"/>

        <element
            name="input.files"
            optional="false"
            implicit="true"
            description="A fileset specification"/>

        <sequential>

            <!-- fail if input fileset is empty -->
            <check-fileset-empty macro="pandoc-dir">
                <input.files/>
            </check-fileset-empty>

            <!-- make output dir if needed -->
            <mkdir dir="@{output}"/>

            <property name="for.keepgoing" value="true"/>

            <for param="file" keepgoing="${for.keepgoing}">
                <input.files/>

                <sequential>

                    <local name="output.file"/>
                    <basename property="output.file" file="@{file}" suffix=".md"/>

                    <!-- @{to} might be "html5" which is not a proper extension  -->
                    <local name="output.ext"/>
                    <condition property="output.ext" value="html" else="@{to}">
                        <contains string="@{to}" substring="html"/>
                    </condition>

                    <pandoc-file
                        file="@{file}"
                        from="@{from}"
                        to="@{to}"
                        options="@{options}"
                        datadir="@{datadir}"
                        template="@{template}"
                        style="@{style}"
                        filters="@{filters}"
                        lua-filters="@{lua-filters}"
                        output="@{output}/${output.file}.${output.ext}"/>

                </sequential>
            </for>

        </sequential>
    </macrodef>


</project>