<?xml version="1.0" encoding="UTF-8"?>

<project
    name="file-utils"
    xmlns:if="ant:if"
    xmlns:unless="ant:unless">

    <description>
---
project:    XML Practical ANT Scripts
title:      file-utils.xml
date:       2018-05-02
author:     Philip Hodder
contact:    philip.hodder@encodis.com
summary:    Macros to check various file system related things
...

# file-utils.xml

A set of utility macros to peform various checks on files and directories:

*   *check-file-exists* fails the build if the specified file does not exist
*   *check-dir-exists* fails the build if the specified directory does not exist
*   *check-fileset-empty* fails the build if the specified file set evaluates to an empty list of
files
*   *check-class-path* fails the build if the specified class does not exist in the ANT classpath
*   *check-file-contains* sets the given property to "true" if a file contains a particular string;
if the property is not supplied then the build will fail if the file does not contain the string
*   *check-exe-path* checks that the specified executable is available on the path, sets a
property with the name of the executable and fails the build if it cannot find it.This is typically
used for build files that might be used on both Windows and Unix that use the &lt;exec&gt; or
&lt;apply&gt; tasks. The simplest usage is to just supply the name of a property that will be set
to the executable name. If this is of the form "app.exe" then the macro will assume that the
executable is called "app" in Unix and "app.exe" in Windows. This can be overridden using the
*unix* and *windows* attributes. For example, setting the *windows* attribute to "my-app.exe" would
search for that in the path.

## Usage

```
&lt;check-file-exists prefix="[apply-transform]" file="result.dat"/&gt;

&lt;check-fileset-empty prefix="[apply-transform]"&gt;
    &lt;fileset dir="../build" includes="**/*.dat"/&gt;
&lt;/check-fileset-empty&gt;
```

This build file fragment ensures that the correct name for the "git" executable is passed
to the &lt;exec&gt; task. This would be *git* in Unix/MacOS and *git.exe* in Windows.

```
&lt;check-exe-path property="git.exe"/&gt;

&lt;exec
&#9;executable="${git.exe}"
&#9;dir="."
&#9;outputproperty="${status}"&gt;
&#9;&lt;arg value="status"/&gt;
&lt;/exec&gt;
```

This fragment finds the executable name for the "Pandoc" program. The normal Windows name is
"pandoc.exe" but as this is sometimes caught by AV software on Window this has been changed to
"pan-doc.exe":

```
&lt;check-exe-path property="pandoc.exe" windows="pan-doc.exe"/&gt;
```

## Dependencies

None


## Properties

These macros create the following (global) properties:

*  *xpants.dir*


## Change Log

##### 2018-02-14 (PH) Initial version

    </description>

    <!-- TODO: see check-values.xml; should generalise here and have message prefix etc -->

    <!-- include macros/properties -->
    <dirname property="xpants.dir" file="${ant.file.file-utils}"/>

    <include file="${xpants.dir}/check-value.xml"/>

    <!-- macros -->

    <macrodef
        name="check-file-exists"
        description="Fail the build if the specified file does not exist">

        <attribute
            name="prefix"
            default=""
            description="Message prefix"/>

        <attribute
            name="file"
            description="File to check for availability"/>

        <attribute
            name="property"
            default=""
            description="Property to update with result (true if file exists)"/>

        <sequential>

            <!-- if property exists then set it if file exists -->
            <condition property="@{property}" value="true" else="false" unless:blank="@{property}">
                <available file="@{file}" type="file"/>
            </condition>

            <fail message="@{prefix} file '@{file}' does not exist or is a directory" if:blank="@{property}">
                <condition>
                    <not><available file="@{file}" type="file"/></not>
                </condition>
            </fail>

        </sequential>
    </macrodef>


    <macrodef
        name="check-dir-exists"
        description="Fail the build if the specified directory does not exist">

        <attribute
            name="prefix"
            default=""
            description="Message prefix"/>

        <attribute
            name="dir"
            description="Directory to check for availability"/>

        <attribute
            name="property"
            default=""
            description="Property to update with result (true if dir exists)"/>

        <sequential>

            <!-- if property exists then set it if dir exists -->
            <condition property="@{property}" value="true" else="false" unless:blank="@{property}">
                <available file="@{dir}" type="dir"/>
            </condition>

            <fail message="@{prefix} directory '@{dir}' does not exist or is a file" if:blank="@{property}">
                <condition>
                    <not><available file="@{dir}" type="dir"/></not>
                </condition>
            </fail>

        </sequential>
    </macrodef>


    <macrodef
        name="check-fileset-empty"
        description="Fail the build if the specified fileset is empty">

        <attribute
            name="prefix"
            default=""
            description="Message prefix"/>

        <attribute
            name="refid"
            default=""
            description="Reference to fileset specification to check"/>

        <attribute
            name="property"
            default=""
            description="Property to update with result (true if fileset not empty)"/>

        <element
            name="input.files"
            optional="true"
            implicit="true"
            description="Fileset specification to check"/>

        <sequential>

            <local name="fileset.notempty"/>

            <pathconvert property="fileset.notempty" setonempty="false">
                <input.files if:blank="@{refid}"/>
                <fileset refid="@{refid}" unless:blank="@{refid}"/>
            </pathconvert>

            <!-- if property exists then set it if fileset empty -->
            <condition property="@{property}" value="true" else="false" unless:blank="@{property}">
                <isset property="fileset.notempty"/>
            </condition>

            <fail message="@{prefix} fileset is empty" if:blank="@{property}">
                <condition>
                    <not><isset property="fileset.notempty"/></not>
                </condition>
            </fail>

        </sequential>
    </macrodef>


    <macrodef
        name="check-class-path"
        description="Fail the build if the class is not in the classpath">

        <attribute
            name="prefix"
            default=""
            description="Message prefix"/>

        <attribute
            name="class"
            description="Class to check"/>

        <attribute
            name="property"
            default=""
            description="Property to update with result (true if class available)"/>

        <sequential>

            <fail message="[check-class-path] attribute '@{class}' is blank or not set" if:blank="@{class}"/>

            <!-- if property exists then set it if file contains the string -->
            <condition property="@{property}" value="true" else="false" unless:blank="@{property}">
                <available classname="@{class}"/>
            </condition>

            <fail message="@{prefix} class '@{class}' not available on the classpath" if:blank="@{property}">
                <condition>
                    <not><available classname="@{class}"/></not>
                </condition>
            </fail>
        </sequential>
    </macrodef>


    <macrodef
        name="check-file-contains"
        description="Set a property if a file contains a string">

        <attribute
            name="file"
            description="File to examine"/>

        <attribute
            name="string"
            description="String to check"/>

        <attribute
            name="property"
            default=""
            description="Property to update with result (true if file contains string)"/>

        <sequential>

            <check-file-exists prefix="[check-file-contains]" file="@{file}"/>

            <fail message="[check-file-contains] attribute '@{string}' is blank or not set" if:blank="@{string}"/>

            <!-- if property exists then set it if file contains the string -->
            <condition property="@{property}" value="true" else="false" unless:blank="@{property}">
                <resourcecontains resource="@{file}" substring="@{string}"/>
            </condition>

            <!-- if property does not exist then fail the build if the file does not contain the string -->
            <fail message="[check-file-contains] '@file' does not contain '@{string}'" if:blank="@{property}">
                <condition>
                    <not><resourcecontains resource="@{file}" substring="@{string}"/></not>
                </condition>
            </fail>

        </sequential>
    </macrodef>


    <macrodef
        name="check-exe-path"
        description="Fail the build if the executable is not on the path">

        <attribute
            name="property"
            description="Property to set with the executable name"/>

        <attribute
            name="windows"
            default=""
            description="Name of the Windows executable (if different from 'property')"/>

        <attribute
            name="unix"
            default=""
            description="Name of the Unix executable (if different from 'property')"/>

        <sequential>

            <!-- get environment variables for PATH -->
            <property environment="env"/>

            <!-- fail if required attributes not set -->
            <check-value-set prefix="[check-exe-path]" name="property" value="@{property}"/>

            <local name="property.name"/>
            <propertyregex property="property.name" input="@{property}" regexp="([a-zA-Z0-9_-]+).[a-zA-Z0-9_-]+" replace="\1"/>

            <local name="property.ext"/>
            <propertyregex property="property.ext" input="@{property}" regexp="[a-zA-Z0-9_-]+.([a-zA-Z0-9_-]+)" replace="\1"/>

            <local name="windows.name"/>
            <property name="windows.name" value="@{windows}" unless:blank="@{windows}"/>
            <property name="windows.name" value="${property.name}.${property.ext}" if:blank="@{windows}"/>

            <local name="unix.name"/>
            <property name="unix.name" value="@{unix}" unless:blank="@{unix}"/>
            <property name="unix.name" value="${property.name}" if:blank="@{unix}"/>

            <!-- set property -->
            <condition property="@{property}" value="${windows.name}">
              <os family="windows"/>
            </condition>

            <condition property="@{property}" value="${unix.name}">
              <not><os family="windows"/></not>
            </condition>

            <!-- check that executable is in the PATH -->
            <fail message="[check-exe-path] An executable file for '@{property}' cannot be found on the path">
              <condition>
                  <not>
                      <or>
                          <!-- Unix path -->
                          <available file="${@{property}}" filepath="${env.PATH}"/>
                          <!-- Windows path -->
                          <available file="${@{property}}" filepath="${env.Path}"/>
                      </or>
                  </not>
              </condition>
            </fail>

            <echo message="[check-exe-path] @{property}=${@{property}}" if:true="${xpants.debug}"/>

        </sequential>
    </macrodef>

    <!-- TODO 'find-jar-file' will look at ANT_HOME and ${user.home}/.ant/lib and find JAR file
         matching given pattern (e.g. to find saxon9XX.jar). don't need if you know the classpath
         so would you just look for the saxon path, say? find 'ant' path  -->

</project>