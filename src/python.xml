<?xml version="1.0" encoding="UTF-8"?>

<project name="python"
    xmlns:if="ant:if"
    xmlns:unless="ant:unless">

    <description>
---
Project:      XPants
Title:        python.xml
Date:         2018-02-14
Author:       Philip Hodder
Contact:      philip.hodder@encodis.com
Summary:      Macro definitions to run, build and install python modules or scripts
...

# python.xml

A set of macro definitions to work with *python* modules.

## Usage


## Dependencies

*  The *python* executable must be installed and available on the PATH.


## Properties

These macros will set the following (global) properties:

*  The **find-exe** macro will be used to set the *python.exe* property to the location of the
*python* executable. Override on the command line if required.
*  The *python-update-version* macro will set a property with the version number. The name of the
property will be based on the module name given, e.g. with `module="mycode.py"` the property will
be called *mycode.py.version.number*.


## Change Log

##### 2018-02-14 (PH) Initial version

    </description>

    <!-- load ant-contrib -->
    <taskdef resource="net/sf/antcontrib/antlib.xml"/>

    <!-- include macros/properties -->
    <property environment="env"/>

    <dirname property="xpants.dir" file="${ant.file.python}"/>
    <property file="${xpants.dir}/xpants.properties"/>

    <include file="${xpants.dir}/find-exe.xml"/>
    <include file="${xpants.dir}/attr-checks.xml"/>
    <include file="${xpants.dir}/file-checks.xml"/>

    <!-- macros -->

    <macrodef
        name="python"
        description="Run a python module or script">

        <attribute
            name="module"
            default=""
            description="Python module name"/>

        <attribute
            name="script"
            default=""
            description="Python script path"/>

        <attribute
            name="dir"
            default="."
            description="Directory to run module/script in"/>

        <element
            name="args"
            optional="true"
            description="Remaining command line arguments"/>

        <sequential>

            <check-attr-set macro="python" name="dir" value="@{dir}"/>

            <fail message="[python] cannot specify 'module' and 'script' attributes together">
                <condition>
                    <and>
                        <not><equals arg1="@{module}" arg2=""/></not>
                        <not><equals arg1="@{script}" arg2=""/></not>
                    </and>
                </condition>
            </fail>

            <!-- check python exists in path -->
            <find-exe property="python.exe" unless:set="python.exe"/>

            <!-- check script exists -->
            <check-file-exists macro="python" file="@{script}" unless:blank="@{script}"/>

            <!-- run module or script -->
            <exec
                executable="${python.exe}"
                searchpath="true"
                dir="@{dir}">
                <arg line="-m @{module}" unless:blank="@{module}"/>
                <arg line="@{script}" unless:blank="@{script}"/>
                <args/>
            </exec>
        </sequential>
    </macrodef>


    <macrodef
        name="python-update-version"
        description="Update the setup config with a version number taken from the source module">

        <attribute
            name="module"
            description="Python module name"/>

        <sequential>

            <!-- check that setup.py exists -->
            <check-file-exists macro="python-update-version" file="setup.py"/>

            <!-- get version number from module -->
            <loadfile srcFile="@{module}" property="@{module}.version.number">
                <filterchain>
                    <tokenfilter>
                        <containsregex
                            pattern="__version__ = '(.*)'"
                            replace="\1"/>
                    </tokenfilter>
                    <striplinebreaks/>
                </filterchain>
            </loadfile>

            <echo message="[python-update-version] setting property '@{module}.version.number' to '${@{module}.version.number}'" if:true="${macro.debug}"/>

            <!-- insert version number into setup.py -->
            <replaceregexp file="setup.py"
                           match="version='[0-9\.]*'"
                           replace="version='${version.number}'"
                           byline="true"/>

        </sequential>
    </macrodef>


    <macrodef
        name="python-build-distribution"
        description="Build a distribution for a python module">

        <sequential>

            <python script="setup.py">
                <args>
                    <arg value="sdist"/>
                    <arg value="--formats=zip"/>
                </args>
            </python>

        </sequential>
    </macrodef>


    <macrodef
        name="python-install-module"
        description="Install a python module">

        <attribute
            name="module"
            description="Python module name"/>

        <attribute
            name="version"
            description="Python module version number"/>

        <sequential>

            <!-- check that setup.py exists -->
            <check-file-exists macro="python-install-module" file="setup.py"/>

            <!-- unzip to build -->
            <property name="temp.dir" value="${java.io.tmpdir}"/>
            <property name="temp.delete" value="true"/>

            <local name="unzip.dir"/>
            <tempfile property="unzip.dir" prefix="${ant.project.name}" destdir="${temp.dir}" deleteonexit="${temp.delete}"/>

            <echo message="[python] temp.file=${temp.file}" if:true="${debug.macro}"/>

            <unzip src="@{module}-@{version}.zip" dest="${unzip.dir}"/>

            <!-- run python setup.py install in build/module-1.0.zip -->
            <python script="setup.py" dir="${unzip.dir}/@{module}-@{version}">
                <args>
                    <arg value="install"/>
                </args>
            </python>

        </sequential>
    </macrodef>

</project>